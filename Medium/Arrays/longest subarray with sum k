

https://www.geeksforgeeks.org/problems/longest-sub-array-with-sum-k0809/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=longest-sub-array-with-sum-k







//{ Driver Code Starts
import java.io.*;
import java.util.*;

class Main {
    public static void main(String args[]) throws IOException {
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine().trim()); // Read number of test cases

        while (t-- > 0) {
            String line = read.readLine().trim(); // Read the array input
            String[] numsStr = line.split(" ");   // Split the input string by spaces
            int[] nums =
                new int[numsStr.length]; // Convert string array to integer array
            for (int i = 0; i < numsStr.length; i++) {
                nums[i] = Integer.parseInt(numsStr[i]);
            }

            int k = Integer.parseInt(read.readLine().trim()); // Read target sum

            Solution ob = new Solution();
            int ans = ob.longestSubarray(nums, k); // Call the function and store result
            System.out.println(ans);
            System.out.println("~");
        }
    }
}

// } Driver Code Ends


// User function Template for Java

class Solution {
    public int longestSubarray(int[] arr, int k) {
        // code here
        ; int n = arr.length;
        ; int left = 0;
        ; int right = 0;
        ; int sum = arr[0];
        ; int maxLen = 0;
        ; while(right<n)
        ; {
            
        ;         while(left<=right && sum>k)
        ;         {
                
        ;         sum -= arr[left];
        ;         left++;
        ;         }
            
        ;     if(sum == k)
        ;     {
        ;         maxLen = Math.max(maxLen , right-left+1);
        ;     }
            
            
        ;         right++;
        ;         if(right<n) sum += arr[right];
                
                
            
        ; }
        ; return maxLen;



                int n = arr.length;
        int maxLen = 0;
        int preSum = 0;
        HashMap<Integer , Integer> map = new HashMap<>();
        for(int i=0; i<n; i++)
        {
            preSum += arr[i];
            if(preSum == k)
            {
                maxLen = Math.max(maxLen , i+1);
            }
            int rem = preSum-k;
            if(map.containsKey(rem))
            {
                maxLen = Math.max(maxLen , i-map.get(rem));
            }
            map.putIfAbsent(preSum , i);
        }
        return maxLen;
    }
}
