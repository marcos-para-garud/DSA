https://leetcode.com/problems/path-sum-ii/description/?source=submission-ac



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        if(root==null)
        {
            return new ArrayList<>();
        }
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> pathSoFar = new ArrayList<>();
         helper(root, targetSum,ans , pathSoFar);
        return ans;
    }
    public static void helper(TreeNode root, int targetSum,
      List<List<Integer>> ans , List<Integer> pathSoFar)
    {
        if(root==null)
        {
            return ;
        }
        // if(root.left!=null && root.right!=null)
        // {
        //     pathSoFar.add(root.val);
        // }

         pathSoFar.add(root.val);
        if(root.left==null && root.right==null && targetSum == root.val)
        {
             ans.add(new ArrayList<>(pathSoFar));
        }

        // sum = sum + root.val;
        // targetSum = targetSum-sum;
        helper(root.left , targetSum-root.val  , ans , pathSoFar);
        helper(root.right , targetSum -root.val , ans , pathSoFar);

        pathSoFar.remove(pathSoFar.size() - 1);
    }
}